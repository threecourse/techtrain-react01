/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * TechTrain Railway
 * TechTrain Railway 中級編で使用する掲示板API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/INFO_3/BulletinBoardApplication/1.0.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    // @ts-ignore
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    // @ts-ignore
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface BadRequestError
 */
export interface BadRequestError {
    /**
     * エラーコード
     * @type {number}
     * @memberof BadRequestError
     */
    errorCode?: number;
    /**
     * エラーメッセージ（日本語）
     * @type {string}
     * @memberof BadRequestError
     */
    errorMessageJP?: string;
    /**
     * エラーメッセージ（英語）
     * @type {string}
     * @memberof BadRequestError
     */
    errorMessageEN?: string;
}

/**
 * 
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * エラーコード
     * @type {number}
     * @memberof InternalServerError
     */
    errorCode?: number;
    /**
     * エラーメッセージ（日本語）
     * @type {string}
     * @memberof InternalServerError
     */
    errorMessageJP?: string;
    /**
     * エラーメッセージ（英語）
     * @type {string}
     * @memberof InternalServerError
     */
    errorMessageEN?: string;
}

/**
 * 
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
    /**
     * エラーコード
     * @type {number}
     * @memberof NotFoundError
     */
    errorCode?: number;
    /**
     * エラーメッセージ（日本語）
     * @type {string}
     * @memberof NotFoundError
     */
    errorMessageJP?: string;
    /**
     * エラーメッセージ（英語）
     * @type {string}
     * @memberof NotFoundError
     */
    errorMessageEN?: string;
}

/**
 * 
 * @export
 * @interface PostCreateRequest
 */
export interface PostCreateRequest {
    /**
     * 投稿内容
     * @type {string}
     * @memberof PostCreateRequest
     */
    post?: string;
}

/**
 * 
 * @export
 * @interface PostCreateResponse
 */
export interface PostCreateResponse {
    /**
     * 掲示板投稿id
     * @type {string}
     * @memberof PostCreateResponse
     */
    postId?: string;
    /**
     * 掲示板スレッドid
     * @type {string}
     * @memberof PostCreateResponse
     */
    threadId?: string;
    /**
     * 投稿内容
     * @type {string}
     * @memberof PostCreateResponse
     */
    post?: string;
}

/**
 * 
 * @export
 * @interface PostData
 */
export interface PostData {
    /**
     * 掲示板投稿id
     * @type {string}
     * @memberof PostData
     */
    id?: string;
    /**
     * 掲示板投稿内容
     * @type {string}
     * @memberof PostData
     */
    post?: string;
}

/**
 * 
 * @export
 * @interface PostListGetResponse
 */
export interface PostListGetResponse {
    /**
     * 掲示板スレッドid
     * @type {string}
     * @memberof PostListGetResponse
     */
    threadId?: string;
    /**
     * 
     * @type {Array<PostData>}
     * @memberof PostListGetResponse
     */
    posts?: Array<PostData>;
}

/**
 * 
 * @export
 * @interface ThreadCreateRequest
 */
export interface ThreadCreateRequest {
    /**
     * スレッド名
     * @type {string}
     * @memberof ThreadCreateRequest
     */
    title?: string;
}

/**
 * 
 * @export
 * @interface ThreadCreateResponse
 */
export interface ThreadCreateResponse {
    /**
     * スレッドid
     * @type {string}
     * @memberof ThreadCreateResponse
     */
    threadId?: string;
    /**
     * スレッド名
     * @type {string}
     * @memberof ThreadCreateResponse
     */
    title?: string;
}

/**
 * 
 * @export
 * @interface ThreadData
 */
export interface ThreadData {
    /**
     * 掲示板スレッドid
     * @type {string}
     * @memberof ThreadData
     */
    id?: string;
    /**
     * スレッド名
     * @type {string}
     * @memberof ThreadData
     */
    title?: string;
}

/**
 * 
 * @export
 * @interface ThreadListGetResponse
 */
export interface ThreadListGetResponse extends Array<ThreadData> {
}


/**
 * PostApi - fetch parameter creator
 * @export
 */
export const PostApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 掲示板スレッド内投稿一覧を取得します。  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。  例）21件目のデータから取得したい場合は、 `/posts?offset=20` となります。
         * @summary 掲示板スレッド内投稿一覧取得API
         * @param {string} threadId 掲示板スレッドid
         * @param {string} offset 何番目のから10件取得するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsThreadIdPostsGet(threadId: string, offset: string, options: any = {}): FetchArgs {
            // verify required parameter 'threadId' is not null or undefined
            if (threadId === null || threadId === undefined) {
                throw new RequiredError('threadId','Required parameter threadId was null or undefined when calling threadsThreadIdPostsGet.');
            }
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling threadsThreadIdPostsGet.');
            }
            const localVarPath = `/threads/{threadId}/posts`
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 掲示板投稿の新規作成をします。
         * @summary 掲示板投稿API
         * @param {string} threadId 
         * @param {PostCreateRequest} body Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsThreadIdPostsPost(threadId: string, body: PostCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'threadId' is not null or undefined
            if (threadId === null || threadId === undefined) {
                throw new RequiredError('threadId','Required parameter threadId was null or undefined when calling threadsThreadIdPostsPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling threadsThreadIdPostsPost.');
            }
            const localVarPath = `/threads/{threadId}/posts`
                .replace(`{${"threadId"}}`, encodeURIComponent(String(threadId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PostCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 掲示板スレッド内投稿一覧を取得します。  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。  例）21件目のデータから取得したい場合は、 `/posts?offset=20` となります。
         * @summary 掲示板スレッド内投稿一覧取得API
         * @param {string} threadId 掲示板スレッドid
         * @param {string} offset 何番目のから10件取得するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsThreadIdPostsGet(threadId: string, offset: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PostListGetResponse> {
            const localVarFetchArgs = PostApiFetchParamCreator(configuration).threadsThreadIdPostsGet(threadId, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 掲示板投稿の新規作成をします。
         * @summary 掲示板投稿API
         * @param {string} threadId 
         * @param {PostCreateRequest} body Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsThreadIdPostsPost(threadId: string, body: PostCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PostCreateResponse> {
            const localVarFetchArgs = PostApiFetchParamCreator(configuration).threadsThreadIdPostsPost(threadId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 掲示板スレッド内投稿一覧を取得します。  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。  例）21件目のデータから取得したい場合は、 `/posts?offset=20` となります。
         * @summary 掲示板スレッド内投稿一覧取得API
         * @param {string} threadId 掲示板スレッドid
         * @param {string} offset 何番目のから10件取得するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsThreadIdPostsGet(threadId: string, offset: string, options?: any) {
            return PostApiFp(configuration).threadsThreadIdPostsGet(threadId, offset, options)(fetch, basePath);
        },
        /**
         * 掲示板投稿の新規作成をします。
         * @summary 掲示板投稿API
         * @param {string} threadId 
         * @param {PostCreateRequest} body Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsThreadIdPostsPost(threadId: string, body: PostCreateRequest, options?: any) {
            return PostApiFp(configuration).threadsThreadIdPostsPost(threadId, body, options)(fetch, basePath);
        },
    };
};

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
    /**
     * 掲示板スレッド内投稿一覧を取得します。  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。  例）21件目のデータから取得したい場合は、 `/posts?offset=20` となります。
     * @summary 掲示板スレッド内投稿一覧取得API
     * @param {string} threadId 掲示板スレッドid
     * @param {string} offset 何番目のから10件取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public threadsThreadIdPostsGet(threadId: string, offset: string, options?: any) {
        return PostApiFp(this.configuration).threadsThreadIdPostsGet(threadId, offset, options)(this.fetch, this.basePath);
    }

    /**
     * 掲示板投稿の新規作成をします。
     * @summary 掲示板投稿API
     * @param {string} threadId 
     * @param {PostCreateRequest} body Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public threadsThreadIdPostsPost(threadId: string, body: PostCreateRequest, options?: any) {
        return PostApiFp(this.configuration).threadsThreadIdPostsPost(threadId, body, options)(this.fetch, this.basePath);
    }

}

/**
 * ThreadApi - fetch parameter creator
 * @export
 */
export const ThreadApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 掲示板スレッド一覧を取得します。  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。  例）21件目のデータから取得したい場合は、 `/threads?offset=20` となります。
         * @summary 掲示板スレッド一覧取得API
         * @param {string} offset 何番目のから10件取得するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsGet(offset: string, options: any = {}): FetchArgs {
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling threadsGet.');
            }
            const localVarPath = `/threads`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 掲示板スレッドを作成します。
         * @summary 掲示板スレッド作成API
         * @param {ThreadCreateRequest} body Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsPost(body: ThreadCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling threadsPost.');
            }
            const localVarPath = `/threads`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ThreadCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThreadApi - functional programming interface
 * @export
 */
export const ThreadApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 掲示板スレッド一覧を取得します。  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。  例）21件目のデータから取得したい場合は、 `/threads?offset=20` となります。
         * @summary 掲示板スレッド一覧取得API
         * @param {string} offset 何番目のから10件取得するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsGet(offset: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ThreadListGetResponse> {
            const localVarFetchArgs = ThreadApiFetchParamCreator(configuration).threadsGet(offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 掲示板スレッドを作成します。
         * @summary 掲示板スレッド作成API
         * @param {ThreadCreateRequest} body Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsPost(body: ThreadCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ThreadCreateResponse> {
            const localVarFetchArgs = ThreadApiFetchParamCreator(configuration).threadsPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ThreadApi - factory interface
 * @export
 */
export const ThreadApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 掲示板スレッド一覧を取得します。  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。  例）21件目のデータから取得したい場合は、 `/threads?offset=20` となります。
         * @summary 掲示板スレッド一覧取得API
         * @param {string} offset 何番目のから10件取得するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsGet(offset: string, options?: any) {
            return ThreadApiFp(configuration).threadsGet(offset, options)(fetch, basePath);
        },
        /**
         * 掲示板スレッドを作成します。
         * @summary 掲示板スレッド作成API
         * @param {ThreadCreateRequest} body Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        threadsPost(body: ThreadCreateRequest, options?: any) {
            return ThreadApiFp(configuration).threadsPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * ThreadApi - object-oriented interface
 * @export
 * @class ThreadApi
 * @extends {BaseAPI}
 */
export class ThreadApi extends BaseAPI {
    /**
     * 掲示板スレッド一覧を取得します。  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。  例）21件目のデータから取得したい場合は、 `/threads?offset=20` となります。
     * @summary 掲示板スレッド一覧取得API
     * @param {string} offset 何番目のから10件取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public threadsGet(offset: string, options?: any) {
        return ThreadApiFp(this.configuration).threadsGet(offset, options)(this.fetch, this.basePath);
    }

    /**
     * 掲示板スレッドを作成します。
     * @summary 掲示板スレッド作成API
     * @param {ThreadCreateRequest} body Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadApi
     */
    public threadsPost(body: ThreadCreateRequest, options?: any) {
        return ThreadApiFp(this.configuration).threadsPost(body, options)(this.fetch, this.basePath);
    }

}

